<html xmlns:MSHelp="http://msdn.microsoft.com/mshelp"><head><title>CommandLineParser Class</title><link rel="stylesheet" type="text/css" href="../styles/presentation.css" /><link rel="stylesheet" type="text/css" href="ms-help://Hx/HxRuntime/HxLink.css" /><script type="text/javascript" src="../scripts/script_prototype.js"> </script><script type="text/javascript" src="../scripts/EventUtilities.js"> </script><script type="text/javascript" src="../scripts/StyleUtilities.js"> </script><script type="text/javascript" src="../scripts/SplitScreen.js"> </script><script type="text/javascript" src="../scripts/ElementCollection.js"> </script><script type="text/javascript" src="../scripts/MemberFilter.js"> </script><script type="text/javascript" src="../scripts/CollapsibleSection.js"> </script><script type="text/javascript" src="../scripts/LanguageFilter.js"> </script><script type="text/javascript" src="../scripts/CookieDataStore.js"> </script><meta name="file" content="9d054bf1-45e9-e3ea-a813-b160f88b6111" /><xml xmlns:msxsl="urn:schemas-microsoft-com:xslt"><MSHelp:Attr Name="AssetID" Value="T:Microsoft.Test.CommandLineParser" /><MSHelp:Keyword Index="A" Term="T:Microsoft.Test.CommandLineParser" /><MSHelp:Keyword Index="A" Term="frlrfMicrosoftTestCommandLineParserClassTopic" /><MSHelp:Keyword Index="A" Term="frlrfMicrosoftTestCommandLineParserMembersTopic" /><MSHelp:Keyword Index="K" Term="CommandLineParser class" /><MSHelp:Keyword Index="K" Term="Microsoft.Test.CommandLineParser class" /><MSHelp:Keyword Index="F" Term="CommandLineParser" /><MSHelp:Keyword Index="F" Term="Microsoft.Test.CommandLineParser" /><MSHelp:Attr Name="TopicType" Value="apiref" /><MSHelp:Attr Name="TopicType" Value="kbSyntax" /><MSHelp:Attr Name="APIType" Value="Managed" /><MSHelp:Attr Name="APILocation" Value="DotNetUtilities.dll" /><MSHelp:Attr Name="APIName" Value="Microsoft.Test.CommandLineParser" /><MSHelp:Attr Name="Locale" Value="en-us" /><MSHelp:Attr Name="Abstract" Value="Provides utilities for parsing command-line values." /></xml><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"></script></head><body><div id="control"><span class="productTitle">Test API</span><br /><span class="topicTitle">CommandLineParser Class</span><br /><div id="toolbar"><span id="chickenFeet"><a href="d4648875-d41a-783b-d5f4-638df39ee413.htm">Namespaces</a> ► <a href="9e56cb75-d7f2-2192-9f33-0f8e7926559e.htm">Microsoft.Test</a> ► <span class="selflink">CommandLineParser</span></span><span id="languageFilter"><select id="languageSelector" onchange="var names = this.value.split(' '); toggleVisibleLanguage(names[1]); lfc.switchLanguage(names[0]); store.set('lang',this.value); store.save();"><option value="CSharp cs">C#</option><option value="VisualBasic vb">Visual Basic</option><option value="ManagedCPlusPlus cpp">Visual C++</option></select></span></div></div><div id="main"><span style="color: DarkGray"> </span><div class="summary">
            Provides utilities for parsing command-line values.
            </div><div class="section"><div class="sectionTitle" onclick="toggleSection(this.parentNode)"><img src="../icons/collapse_all.gif" /> Declaration Syntax</div><div class="sectionContent"><div id="syntaxSection"><table class="filter"><tr class="tabs" id="syntaxTabs"><td class="tab" x-lang="CSharp" onclick="toggleClass('syntaxTabs','x-lang','CSharp','activeTab','tab'); toggleStyle('syntaxBlocks','x-lang','CSharp','display','block','none');">C#</td><td class="tab" x-lang="VisualBasic" onclick="toggleClass('syntaxTabs','x-lang','VisualBasic','activeTab','tab'); toggleStyle('syntaxBlocks','x-lang','VisualBasic','display','block','none');">Visual Basic</td><td class="tab" x-lang="ManagedCPlusPlus" onclick="toggleClass('syntaxTabs','x-lang','ManagedCPlusPlus','activeTab','tab'); toggleStyle('syntaxBlocks','x-lang','ManagedCPlusPlus','display','block','none');">Visual C++</td></tr></table><div id="syntaxBlocks"><div class="code" x-lang="CSharp"><pre><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="identifier">CommandLineParser</span></pre></div><div class="code" x-lang="VisualBasic"><pre><span class="keyword">Public</span> <span class="keyword">NotInheritable</span> <span class="keyword">Class</span> <span class="identifier">CommandLineParser</span></pre></div><div class="code" x-lang="ManagedCPlusPlus"><pre><span class="keyword">public</span> <span class="keyword">ref class</span> <span class="identifier">CommandLineParser</span> <span class="keyword">abstract</span> <span class="keyword">sealed</span></pre></div></div></div></div></div><div class="section"><div class="sectionTitle" onclick="toggleSection(this.parentNode)"><img src="../icons/collapse_all.gif" /> Members</div><div class="sectionContent"><div id="allMembersSection"><table class="filter"><tr class="tabs" id="memberTabs"><td class="tab" value="all" onclick="toggleClass('memberTabs','value','all','activeTab','tab'); processSubgroup('all', 'member'); processList('memberList','filterElement','member');">All Members</td><td class="tab" value="method" onclick="toggleClass('memberTabs','value','method','activeTab','tab'); processSubgroup('method','member'); processList('memberList','filterElement','member');">Methods</td></tr><tr><td class="line" colspan="2"><label for="public"><input id="public" type="checkbox" checked="true" onclick="toggleCheckState('public',this.checked); processList('memberList','filterElement','member');" />Public</label><br /><label for="protected"><input id="protected" type="checkbox" checked="true" onclick="toggleCheckState('protected',this.checked); processList('memberList','filterElement','member');" />Protected</label></td><td class="line" colspan="2"><label for="instance"><input id="instance" type="checkbox" checked="true" onclick="toggleCheckState('instance',this.checked); processList('memberList','filterElement','member');" />Instance</label><br /><label for="static"><input id="static" type="checkbox" checked="true" onclick="toggleCheckState('static',this.checked); processList('memberList','filterElement','member');" />Static</label></td><td class="line" colspan="2"><label for="declared"><input id="declared" type="checkbox" checked="true" onclick="toggleCheckState('declared',this.checked); processList('memberList','filterElement','member');" />Declared</label><br /><label for="inherited"><input id="inherited" type="checkbox" checked="true" onclick="toggleCheckState('inherited',this.checked); processList('memberList','filterElement','member');" />Inherited</label></td></tr></table><table class="members" id="memberList"><tr><th class="iconColumn">Icon</th><th class="nameColumn">Member</th><th class="descriptionColumn">Description</th></tr><tr data="method; public; static; declared"><td><img src="../icons/pubmethod.gif" /><img src="../icons/static.gif" title="static member" /></td><td><a href="e7a874a0-60e4-b057-fba7-715a596cecbb.htm">ParseArguments(IEnumerable<span class="languageSpecificText"><span class="cs">&lt;</span><span class="vb">(Of </span><span class="cpp">&lt;</span><span class="nu">(</span></span>String<span class="languageSpecificText"><span class="cs">&gt;</span><span class="vb">)</span><span class="cpp">&gt;</span><span class="nu">)</span></span>, Object)</a></td><td><div class="summary">
            Iterates through a collection of key/value pairs, where the key is a property name of 
            the object to populate and the value is the value to set the property to. 
            </div><br /></td></tr><tr data="method; public; static; declared"><td><img src="../icons/pubmethod.gif" /><img src="../icons/static.gif" title="static member" /></td><td><a href="6475815e-3e7c-3748-7e4b-63e7a42fa67c.htm">ParseCommand(IEnumerable<span class="languageSpecificText"><span class="cs">&lt;</span><span class="vb">(Of </span><span class="cpp">&lt;</span><span class="nu">(</span></span>String<span class="languageSpecificText"><span class="cs">&gt;</span><span class="vb">)</span><span class="cpp">&gt;</span><span class="nu">)</span></span>, IEnumerable<span class="languageSpecificText"><span class="cs">&lt;</span><span class="vb">(Of </span><span class="cpp">&lt;</span><span class="nu">(</span></span>Command<span class="languageSpecificText"><span class="cs">&gt;</span><span class="vb">)</span><span class="cpp">&gt;</span><span class="nu">)</span></span>)</a></td><td><div class="summary">
            Parse a command line into a Command. For these purposes a command line is defined as a
            command name followed by arguments.
            </div><br /></td></tr><tr data="method; public; static; declared"><td><img src="../icons/pubmethod.gif" /><img src="../icons/static.gif" title="static member" /></td><td><a href="c179efe0-246c-a9c4-c35d-fefde485d864.htm">PrintArgumentsUsage(Object)</a></td><td><div class="summary">
            Prints names and descriptions for properties on the specified object.
            </div><br /></td></tr><tr data="method; public; static; declared"><td><img src="../icons/pubmethod.gif" /><img src="../icons/static.gif" title="static member" /></td><td><a href="cf3a1803-da06-ebf0-4969-50982f4ad97f.htm">PrintCommandUsage(IEnumerable<span class="languageSpecificText"><span class="cs">&lt;</span><span class="vb">(Of </span><span class="cpp">&lt;</span><span class="nu">(</span></span>String<span class="languageSpecificText"><span class="cs">&gt;</span><span class="vb">)</span><span class="cpp">&gt;</span><span class="nu">)</span></span>, IEnumerable<span class="languageSpecificText"><span class="cs">&lt;</span><span class="vb">(Of </span><span class="cpp">&lt;</span><span class="nu">(</span></span>Command<span class="languageSpecificText"><span class="cs">&gt;</span><span class="vb">)</span><span class="cpp">&gt;</span><span class="nu">)</span></span>)</a></td><td><div class="summary">
            Prints detailed usage for a specific command if specified in the
            arguments, or a general summary of all commands otherwise.
            </div><br /></td></tr><tr data="method; public; static; declared"><td><img src="../icons/pubmethod.gif" /><img src="../icons/static.gif" title="static member" /></td><td><a href="01de5554-732f-2b19-4125-2f24b88b975f.htm">ToString(Object)</a></td><td><div class="summary">
            Creates a string that represents key/value arguments for the properties of the 
            specified object. For example, an object with a name (string) of "example" and a 
            priority value (integer) of 1 translates to '/name=example  /priority=1'. This 
            can be used to send data structures through the command line.
            </div><br /></td></tr></table></div></div></div><div class="section"><div class="sectionTitle" onclick="toggleSection(this.parentNode)"><img src="../icons/collapse_all.gif" /> Examples</div><div class="sectionContent">
            The following example shows how to parse to a strongly typed data structure and to an executable command structure.
            <span id="cbc_1" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img src="../icons/CopyCode.gif" style="margin-right: 5px;" />Copy</span>C#</div><div class="code"><pre><span class="highlight-comment">// SAMPLE USAGE #1:</span>
<span class="highlight-comment">// Sample for parsing the following command-line:</span>
<span class="highlight-comment">// Test.exe /verbose /runId=10</span>
<span class="highlight-comment">// This sample declares a class in which the strongly typed arguments are populated</span>
<span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> CommandLineArguments
{
   <span class="highlight-keyword">bool</span>? Verbose { get; set; }
   <span class="highlight-keyword">int</span>? RunId { get; set; }
}

CommandLineArguments a = <span class="highlight-keyword">new</span> CommandLineArguments();
CommandLineParser.ParseArguments(args, a);

<span class="highlight-comment">// SAMPLE USAGE #2:</span>
<span class="highlight-comment">// Sample for parsing the following command-line:</span>
<span class="highlight-comment">// Test.exe run /verbose /id=10</span>
<span class="highlight-comment">// In this particular case we have an actual command on the command-line (“run”),</span>
<span class="highlight-comment">// which we want to effectively de-serialize and execute.</span>
<span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> RunCommand : Command
{
    <span class="highlight-keyword">bool</span>? Verbose { get; set; }
    <span class="highlight-keyword">int</span>? RunId { get; set; }

    <span class="highlight-keyword">public</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> Execute()
    {
    }
}

Command c = CommandLineParser.ParseCommand(args, <span class="highlight-keyword">new</span> Command[] { <span class="highlight-keyword">new</span> RunCommand() });
c.Execute();</pre></div></span></div></div><div class="section"><div class="sectionTitle" onclick="toggleSection(this.parentNode)"><img src="../icons/collapse_all.gif" /> Inheritance Hierarchy</div><div class="sectionContent"><table cellspacing="0" cellpadding="0"><tr><td colspan="2"><span class="nolink">Object</span></td></tr><tr><td><img src="../icons/LastChild.gif" /></td><td><span class="selflink">CommandLineParser</span></td></tr></table></div></div><p><div id="footer"> </div>Assembly: <span sdata="assembly">DotNetUtilities</span> (Module: DotNetUtilities) Version: 4.0.0.0 (4.0.11013.0)</p></div></body></html>